Guia de unidades de medida no CSS: quando usar cada uma

1. px (pixeis)

Uso recomendado:

para tamanhos fixos e precisos que não devem variar com o tamanho da tela ou do texto.
Ideal para BORDAS, MARGENS e tamanhos de elementos que precisam MANTER uma aparencia CONSISTENTE.
         
Quando evitar:

Quando vc deseja que o design seja mais flexível e adaptável a diferentes tamanhos de tela e configuração de acessibilidade.

ex de uso:

html:
<div class="box">
</div>

css:
.box {
    width: 300px; /*largura fixa*/
    height: 200px /* altura fixa*/
    background-color: red;
}

_______________________________________________________________________________________________________________________

2. em (relative to parent font size)

Uso recomendado:

Quando vc deseja que o tamanho de um elemento seja relativo ao tamanho da fonte de seu elemento pai.
Ideal para criar layouts e tipografia que se adaptam ao tamanho do texto do pai.

Quando evitar:

Se vc precisa de consistencia em relação ao tamanho da fonte em toda a aplicação, independente da hierarquia de elementos.

ex de uso:

hml:
<div class="container">

    <div class="child">

    </div>

</div>

css
.container {
    font-size; 16px; /*tamanho base - pai*/
}

.child {
    font-size; 1.Sem; /* 1.5 vezes o tamanho da fonte do pai (24px)*/
}

_______________________________________________________________________________________________________________________

3. rem (relative to root font size)

Uso recomedado:

Para criar tamanhos de fontes e espaçamentos consistentes em toda a aplicação, baseando-se no tamanho da fonte raiz (<html>).
Ideal para layouts e tipografia que precisam ser consistentes independentemente do tamanho da fonte dos elementos pais.

Quando evitar:

Quando vc quer um tamanho que seja relativo apenas ao elemento pai específico e não á raiz.

ex de uso:

html 
<div class="container">

     <div class="text">
        <p> lorem </p>
     </div>
</div>

css

html {
    font-size: 16px; /*tamanho base da fonte*/
}
.text {
    font-size: 2rem; /* 32px (2 * 16px) */
}

_______________________________________________________________________________________________________________________

4. vh (viewport height)

Uso recomendado:

Para definir tamanhos de altura relativos a altura da viewport, como para criar seções de tela cheia ou elementos que devem ocupar uma porcentagem da altura da tela.
Ideal para lauouts que devem se ajustar a altura da tela do usuário.

Quando evitar:

Para elementos que não precisam ser sensíveis ao tamanho da viewport e devem ter tamanhos fixos ou proporcionais ao conteúdo.

ex de uso:

 html

<section class="fullscreen-section">
         <p>lorem</p>
</section>
testar em tamanhos de telas diferentes

css
.fullscreen-section {
    height: 100vh; /*100% da altura da viewport*/
    width: 50vw
    backgroun-color: black;
}
_______________________________________________________________________________________________________________________
 
 5.  vw (viewport widht)

 uso recomendado:

 Para definir tamanhos de largura relativos a largura viewport, útil para criar layouts responsivos ou elementos que devem ajustar a largura da tela.
 Ideal para elementos que precisam ocupar uma porcentagem da largura da tela do usuário.

 Quando evitar:

 Para elementos cuja largura não deve depender da largura da viewport e deve ser fixa ou proporcional ao conteúdo.

 ex de uso:

html
<section class="responsive-element">
            <p>lorem</p>
</section>            

css
.responsive-element {
    width: 50vw; /* 50% da largura da viewport*/
    height: 50vh;
    background-color: yellow;
}

_______________________________________________________________________________________________________________________

6. % (percentual)

Uso recomendado:

Para definir tamanhos relativos ao tamanho do elemento pai, ideal para layouts flexiveis e adaptáveis, útil para definir larguras e alturas de elementos.

Quando evitar:

Quando o tamanho não deve depender do elemento pai, especialmente se o elemento pai mão tiver um tamanho fixo ou previsivel.

ex de uso:

html
<div class="parend">
      <div class="child">
      </div>
</div>      

css:
.parent {
    widht: 500px /*largura fixa do pai*/
    background-color: green;
}

.child {
    widht: 50%; */50% da largura do elemento pai  (250px)*/
    backgroud-color: pink;
}